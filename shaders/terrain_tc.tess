#version 410

layout(vertices = 4) out;

in vec3 vPosition[];
out vec3 tcPosition[];

uniform sampler2D terrain_geo;
uniform sampler2D terrain_color;
uniform float terrain_height;
uniform float terrain_length;
uniform float lod_factor;
uniform vec2 screen_size;

uniform GlobalValues {
    mat4 modelview; // camera*modelview
    mat4 projection_modelview; //perspective*camera*modelview
    mat4 normal_matrix; // transpose(inverse(modelview))
    mat4 screen_to_world; //inverse(perspective*camera)
    float near;
    vec3 camera_pos;
    vec3 eye_vector;
    float far;
} GlobalValues;

#define ID gl_InvocationID
// to set :   gl_TessLevelInner; gl_TessLevelOuter;

vec3 project(vec3 vertex) {
    vec4 return_value = GlobalValues.projection_modelview*vec4(vertex,1.0);
    return return_value.xyz/return_value.w;
}

float level(vec2 v0, vec2 v1){
    return clamp(distance(v0, v1)/lod_factor, 1, 64);
}

vec2 screen_space(vec3 vertex){
    return (clamp(vertex.xy, -1.3, 1.3)+1) * (screen_size*0.5);
}

bool offscreen(vec3 vertex){
    if(vertex.z < -0.5){
        return true;
    }   
    return any(lessThan(vertex.xy, vec2(-1.7))) ||
        any(greaterThan(vertex.xy, vec2(1.7)));

}

void main() {
    tcPosition[ID]=vPosition[ID];
    if(ID==0) {
        // calculate tessellation levels for this patch
        vec3 v0 = project(vPosition[0]);
        vec3 v1 = project(vPosition[1]);
        vec3 v2 = project(vPosition[2]);
        vec3 v3 = project(vPosition[3]);

        if(offscreen(v0) && offscreen(v1) && offscreen(v2) && offscreen(v3)) {
            gl_TessLevelInner[0] = 0;
            gl_TessLevelInner[1] = 0;
            gl_TessLevelOuter[0] = 0;
            gl_TessLevelOuter[1] = 0;
            gl_TessLevelOuter[2] = 0;
            gl_TessLevelOuter[3] = 0;
        } else {
            vec2 ss0 = screen_space(v0);
            vec2 ss1 = screen_space(v1);
            vec2 ss2 = screen_space(v2);
            vec2 ss3 = screen_space(v3);

            float e0 = level(ss1, ss2);
            float e1 = level(ss0, ss1);
            float e2 = level(ss3, ss0);
            float e3 = level(ss2, ss3);

            gl_TessLevelInner[0] = mix(e1, e2, 0.5);
            gl_TessLevelInner[1] = mix(e0, e3, 0.5);
            gl_TessLevelOuter[0] = e0;
            gl_TessLevelOuter[1] = e1;
            gl_TessLevelOuter[2] = e2;
            gl_TessLevelOuter[3] = e3;
        }
    }
}

